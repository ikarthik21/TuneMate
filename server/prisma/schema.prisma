// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String      @id @default(uuid()) @map("_id")
  email                   String      @unique
  username                String      @unique @default("")
  password                String      @default("")
  profileImg              String      @default("")
  role                    String      @default("user")
  verified                Boolean     @default(false)
  playerState             Json
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  playlists               Playlist[]
  favorites               Favorites[]
  history                 History[]
}

model Playlist {
  id     String @id @default(uuid()) @map("_id")
  name   String @default("")
  image  String @default("")
  userId String
  type   String @default("public")
  songs  Json[] @default([])
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId_index")
}

model Recommended {
  id    String @id @default(uuid()) @map("_id")
  name  String @default("")
  image String @default("")
  type  String @default("public")
  songs Json[] @default([])
}

model TuneMateUpdates {
  id      String @id @default(uuid()) @map("_id")
  title   String @default("")
  Content Json
}

model History {
  id      String @id @default(uuid()) @map("_id")
  userId  String
  history Json[]
  user    User   @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId_index")
}

model Favorites {
  id        String @id @default(uuid()) @map("_id")
  userId    String
  favorites Json[]
  User      User   @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId_index")
}

model SyncState {
  id                String   @id @default(uuid()) @map("_id")
  userId            String
  connectedUserId   String   @default("")
  connectedUserName String   @default("")
  lastUpdated       DateTime @updatedAt

  @@index([userId], name: "userId_index")
}
